#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Biodome"
  https://create.arduino.cc/cloud/things/3adeb344-ebb7-4b24-b162-b2a30f1e1b5e 

  Arduino IoT Cloud Properties description

  The following variables are automatically generated and updated when changes are made to the Thing

  float temperature;
  float humidity;
  float illuminance;
  float pressure;
  float uva;
  float uvb;
  float uvindex;
  bool lEDSwitch1;

  Properties which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/
int led = 5; // in the example the LED is connected to port 5

#include <Arduino_MKRENV.h>
#include "thingProperties.h"

void setup() {
  pinMode(led, OUTPUT); // The LED is the output device
  lEDSwitch1 = false;
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 
  while (!Serial);

  if (!ENV.begin()) {
    Serial.println("Failed to initialize MKR ENV shield!");
    while (1);

  }

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  temperature = float(ENV.readTemperature());
  humidity =float(ENV.readHumidity());
  pressure = float(ENV.readPressure());
  illuminance =float(ENV.readIlluminance());
  uva = float(ENV.readUVA());
  uvb =float(ENV.readUVB());
  uvindex =float(ENV.readUVIndex());

  // print each of the sensor values
  Serial.print("Temperature = ");
  Serial.print(temperature);
  Serial.println(" °C");

  Serial.print("Humidity    = ");
  Serial.print(humidity);
  Serial.println(" %");

  Serial.print("Pressure    = ");
  Serial.print(pressure);
  Serial.println(" kPa");

  Serial.print("Illuminance = ");
  Serial.print(illuminance);
  Serial.println(" lx");

  Serial.print("UVA         = ");
  Serial.println(uva);

  Serial.print("UVB         = ");
  Serial.println(uvb);

  Serial.print("UV Index    = ");
  Serial.println(uvindex);

  // print an empty line
  Serial.println();

  // wait 1 second to print again
  delay(1000);
  
}


void onTemperatureChange() {
  // Do something
}



void onHumidityChange() {
  // Do something
}


void onPressureChange() {
  // Do something
}


void onIlluminanceChange() {
  // Do something
}


void onUvaChange() {
  // Do something
}


void onUvbChange() {
  // Do something
}


void onLuxChange() {
  // Do something
}



void onUvindexChange() {
  // Do something
}




void onLEDSwitch1Change() {
  digitalWrite(led, lEDSwitch1);
}
